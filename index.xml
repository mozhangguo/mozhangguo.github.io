<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mozhang Guo Blog</title>
    <link>https://mozhangguo.github.io/</link>
    <description>Recent content on Mozhang Guo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>me@example.com (Mozhang Guo)</managingEditor>
    <webMaster>me@example.com (Mozhang Guo)</webMaster>
    <lastBuildDate>Sun, 18 Feb 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://mozhangguo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About me</title>
      <link>https://mozhangguo.github.io/about/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate>
      <author>me@example.com (Mozhang Guo)</author>
      <guid>https://mozhangguo.github.io/about/</guid>
      
        <description>ðŸ‘‹ Hi, I&amp;rsquo;m Mozhang (Michael) Guo, a recent Master&amp;rsquo;s graduate in Communication Systems and AI from Western University, with an undergraduate degree in Electrical Engineering from the University of Waterloo. My academic journey includes publishing two IEEE conference papers and gaining hands-on software development experience through multiple internships. Passionate about technology, I&amp;rsquo;m currently seeking software development roles where I can apply my knowledge to contribute to innovative projects.</description>
      
    </item>
    
    <item>
      <title>LeetCode 1188. Design Bounded Blocking Queue</title>
      <link>https://mozhangguo.github.io/post/notes/leetcodelinkedlistproblemsoln/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate>
      <author>me@example.com (Mozhang Guo)</author>
      <guid>https://mozhangguo.github.io/post/notes/leetcodelinkedlistproblemsoln/</guid>
      
        <description>Problem Description The problem asked us to imlement a thread safer bounded blocking queues with following methods.
Constructor enqueue dequeue size The implementation will be tested under multi-threaded condition. Each thread will either be a producer (calling enqueue) or a consumer(calling dequeue).
Intuition C++ offers us multiple ways of implementing the thread safe mechanism. The Conditional variable and the mutex locks can be a
Approach Complexity Code Our solution using condition variable and mutex can be seen below.</description>
      
    </item>
    
    <item>
      <title>Channel Modelling</title>
      <link>https://mozhangguo.github.io/post/blogs/channelmodel/</link>
      <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
      <author>me@example.com (Mozhang Guo)</author>
      <guid>https://mozhangguo.github.io/post/blogs/channelmodel/</guid>
      
        <description>asdasdasd as dasdasdasd
afsdd asd as da sdasd asd as
d sadas</description>
      
    </item>
    
  </channel>
</rss>
